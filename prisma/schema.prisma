datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//?BEGIN ENUM
enum RoleCode {
  ADMIN
  SISWA
  INSTRUKTUR
  PENGURUS
  ANY
}

enum TrainingType {
  R //Regular
  P //Pemerintah
}

enum ChatType {
  T //Text
  I //Image
  F //File
}

enum WorkStatus {
  Tetap
  Kontrak
  Part_Time
  Freelance
}

enum ExamStatus {
  Pending
  Selesai
}

enum AttendanceType {
  H //Hadir
  I //Izin
  S //Sakit
  A //Alpha
}

enum AttendanceSchedule {
  IN
  OUT
}

enum CourseStatus {
  Sudah
  Sedang
  Selesai
}

enum Gender {
  L //Laki-laki
  P //Perempuan
}

enum ParentIdentifier {
  I //Ibu
  A //Ayah
  W //Wali
}

enum ScheduleType {
  Materi
  Ujian
}

enum ScheduleStatus {
  AVAILABLE
  UNAVAILABLE
}

enum EnrollmentStatus {
  BOOKED
  IN_PROGRESS
  COMPLETED
}

enum memberState {
  DS //Data Siswa
  DI //Data Ibu
  DA //Data Ayah
  DW //Data Wali
  PK //Pilih Kursus
  PEM //Pembayaran
  SEL //Selesai
  APR //Approval
}

enum avaliablePage {
  REGISTER
  LOGIN
}

enum allowedTerm {
  PERSETUJUAN_ORANGTUA
  PERSETUJUAN_PEMBAYARAN
}

enum dashboardSection {
  HERO_BANNER
  TENTANG_KAMI
  VISI
  MISI
  KEPERCAYAAN_PRESTASI
  PROGRAM_PELATIHAN
  TIM
  KARYA_SISWA
  TESTIMONI
  INDUSTRI
  FAQ
  FOOTER
}

//? END ENUM

// MODELS
model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  memberId     Int       @unique
  roleId       Int
  forgetToken  String?   @db.Text
  forgetExpiry DateTime?
  isSuspended  Boolean   @default(false)

  employee    Employee?
  member      Member?      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  role        Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  ChatRecap   ChatRecap?
  Chat        Chat[]
  Facilitator Facilitator?

  @@map("user")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  code       RoleCode
  identifier String   @unique
  User       User[]

  @@map("role")
}

model Employee {
  id           Int    @id @default(autoincrement())
  name         String
  position     String
  profileImage String
  email        String
  phoneNumber  String @unique
  userId       Int    @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employee")
}

model Location {
  id        Int    @id @default(autoincrement())
  name      String
  latitude  String
  longitude String
  range     Int
}

model Transaction {
  id               Int       @id @default(autoincrement())
  memberId         Int
  status           String
  purpose          String
  transactionId    String    @unique
  isPaid           Boolean   @default(false)
  paymentMethod    String?
  paymentTotal     Float
  paymentDate      DateTime?
  merchantTradeNo  String?
  platformTradeNo  String?
  qrisLink         String?   @db.Text
  customerNo       String?
  virtualAccountNo String?
  expiredDate      DateTime?
  filePath         String?
  createdAt        DateTime? @default(now())

  memberTransactions MemberTransaction[]
  member             Member              @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberLoan         MemberLoan?

  @@map("transaction")
}

model CuriculumStructure {
  id          Int    @id @default(autoincrement())
  name        String
  type        String
  timePerHour Int

  CuriculumStructureDetail CuriculumStructureDetail[]
  curiculum                Curiculum[]
  training                 Training[]

  @@map("curiculum_structure")
}

model CuriculumStructureDetail {
  id                 Int                @id @default(autoincrement())
  structureId        Int
  type               String?
  code               String?
  competencyUnit     String             @db.Text
  hours              Int
  curiculumStructure CuriculumStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)

  @@map("curiculum_structure_detail")
}

model Curiculum {
  id                 Int                @id @default(autoincrement())
  name               String
  structureId        Int
  curiculumStructure CuriculumStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)

  curiculumDetail CuriculumDetail[]
  unitCompetency  UnitCompetency[]

  @@map("curiculum")
}

model UnitCompetency {
  id          Int    @id @default(autoincrement())
  curiculumId Int
  code        String
  name        String

  curiculum Curiculum         @relation(fields: [curiculumId], references: [id], onDelete: Cascade)
  details   CuriculumDetail[] @relation("UnitToDetail")

  @@map("unit_competency")
}

model CuriculumDetail {
  id                Int     @id @default(autoincrement())
  curiculumId       Int
  unitCompetencyId  Int?
  type              String?
  code              String?
  competency        String? @db.Text
  elementCompetency String  @db.Text
  indikator         String? @db.Text

  unitCompetency    UnitCompetency?          @relation("UnitToDetail", fields: [unitCompetencyId], references: [id], onDelete: SetNull)
  learningMaterials LearningMaterialDetail[]
  Curiculum         Curiculum[]

  @@map("curiculum_detail")
}

model LearningMaterialDetail {
  id                Int    @id @default(autoincrement())
  curiculumDetailId Int
  code              String
  name              String
  weight            Float
  duration          Int
  methods           String
  indicator         String
  moduleCode        String
  moduleName        String

  curiculumDetail CuriculumDetail @relation(fields: [curiculumDetailId], references: [id], onDelete: Cascade)

  @@map("learning_material_detail")
}

model Training {
  id            Int          @id @default(autoincrement())
  title         String
  description   String
  trainingImage String
  type          TrainingType

  totalParticipants   Int
  totalCourses        Int
  totalHours          Int
  targetTrainingHours Int?
  level               Int?
  isActive            Boolean @default(false)

  materials         Material[]
  memberCourses     MemberCourse[]
  exams             Exam[]
  trainingSchedule  TrainingSchedule[]
  Dashboard         Dashboard[]
  member            Member[]
  MemberTransaction MemberTransaction[]

  structureId        Int
  curiculumStructure CuriculumStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)

  @@map("training")
}

model Dashboard {
  id               Int              @id @default(autoincrement())
  sectionID        dashboardSection
  sectionName      String
  uid              String           @unique
  isTitle          Boolean          @default(false)
  image            String?
  title            String?
  description      String?          @db.Text
  add_string_1     String?          @db.Text
  siswa_counter    String?
  industri_counter String?
  alumni_counter   String?
  training_id      Int?

  training Training? @relation(fields: [training_id], references: [id], onDelete: Cascade)
}

model Page {
  id           Int           @id @default(autoincrement())
  pageID       avaliablePage
  uid          String        @unique
  dividerTitle String
  title        String?
  description  String?       @db.Text
  file         String?
}

model TrainingSchedule {
  id          Int                  @id @default(autoincrement())
  trainingId  Int
  startTime   DateTime
  endTime     DateTime
  description String?
  type        TrainingType
  enrollments TrainingEnrollment[]

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@unique([trainingId, startTime])
  @@index([startTime])
  @@map("training_schedule")
}

model TrainingEnrollment {
  id         Int              @id @default(autoincrement())
  memberId   Int
  scheduleId Int
  status     EnrollmentStatus
  joinedAt   DateTime         @default(now())

  schedule TrainingSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  member   Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, scheduleId])
  @@index([scheduleId])
  @@map("training_enrollment")
}

model Exam {
  id             Int       @id @default(autoincrement())
  trainingId     Int
  title          String
  description    String
  totalQuestions Int
  totalHours     Int
  questions      Json
  answers        Json?
  date           DateTime?

  training    Training     @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  memberTests MemberTest[]

  @@map("exam")
}

model Material {
  id         Int    @id @default(autoincrement())
  trainingId Int
  coverImage String
  title      String
  size       String
  link       String

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@map("material")
}

model ChatRecap {
  id              Int      @id @unique
  userId          Int      @unique
  totalMessage    Int      @default(0)
  unreadedMessage Int      @default(0)
  createdAt       DateTime @default(now())

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Chat Chat[]
}

model Chat {
  id          Int      @id @default(autoincrement())
  senderId    Int?
  chatRecapId Int?
  message     String?  @db.Text
  fileSize    Int?
  fileLink    String?
  type        ChatType
  sentAt      DateTime @default(now())

  chatRecap ChatRecap? @relation(fields: [chatRecapId], references: [id], onDelete: Cascade)
  sender    User?      @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chats")
}

// MEMBER SCHEMA
model Member {
  id                    Int         @id @default(autoincrement())
  name                  String?
  phoneNumber           String?     @unique
  profileImage          String?
  totalCourses          Int?        @default(0)
  totalCoursePrice      Float?      @default(0)
  totalCourseHours      Int?        @default(0)
  totalExamsCompleted   Int?        @default(0)
  totalMaterials        Int?        @default(0)
  totalCareers          Int?        @default(0)
  formattedAttendance   String?     @default("0|0|0|0") //?Formated: Alpha|Izin|Sakit|Hadir
  firstAttendanceDate   DateTime?
  trainingId            Int?
  courseCategoryId      Int?
  courseLevel           Int         @default(0)
  dataVerified          Boolean     @default(false)
  verifiedAt            DateTime?
  createdAt             DateTime?   @default(now())
  isGraduate            Boolean     @default(false)
  memberState           memberState @default(DS)
  registrationPaymentId Int?        @unique

  training            Training?            @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  identity            MemberIdentity?
  careers             MemberWork[]
  enrollment          TrainingEnrollment[]
  transaction         Transaction[]
  parents             MemberParent[]
  attendances         MemberAttendance[]
  salarys             MemberSalary[]
  tests               MemberTest[]
  transactions        MemberTransaction[]  @relation("AllTransactions")
  registrationPayment MemberTransaction?   @relation("RegistrationPayment", fields: [registrationPaymentId], references: [id], onDelete: Cascade)
  courses             MemberCourse[]       @relation(name: "MemberToCourses")
  User                User?
  MemberCertificate   MemberCertificate[]
  MemberLoan          MemberLoan[]

  @@map("member")
}

model MemberLoan {
  id            Int    @id @default(autoincrement())
  memberId      Int
  loanUID       String //MemberIdDDMMYY1
  context       String
  total         Float
  transactionId Int?   @unique

  member      Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model MemberTransaction {
  id            Int      @id @default(autoincrement())
  trainingId    Int?
  memberId      Int?
  isSuccess     Boolean  @default(false)
  paymentTotal  Float
  transactionId Int
  paymentDate   DateTime

  training        Training?   @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  member          Member?     @relation("AllTransactions", fields: [memberId], references: [id], onDelete: Cascade)
  registrationFor Member?     @relation("RegistrationPayment")

  @@map("member_transaction")
}

model MemberCertificate {
  id         Int      @id @default(autoincrement())
  memberId   Int?
  imageLink  String
  imageTitle String
  imageSize  Int
  createdAt  DateTime @default(now())

  member Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("member_certificate")
}

model MemberWork {
  id                  Int        @id @default(autoincrement())
  memberId            Int
  position            String
  status              WorkStatus
  companyName         String
  companyLogo         String?
  isCurrentlyEmployed Boolean
  startDate           DateTime?
  endDate             DateTime?
  location            String

  member      Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  salarySlips MemberSalary[]

  @@map("member_work")
}

model MemberSalary {
  id          Int   @id @default(autoincrement())
  workId      Int
  memberId    Int
  monthIndex  Int
  year        Int
  basicSalary Float
  allowance   Float
  bonus       Float
  overtime    Float

  work   MemberWork @relation(fields: [workId], references: [id], onDelete: Cascade)
  member Member?    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("member_salary")
}

model MemberTest {
  id                 Int        @id @default(autoincrement())
  answer             Json?
  questionsCompleted Int?
  secondsCompleted   Int?
  memberId           Int
  examId             Int
  startTime          DateTime
  finishedAt         DateTime?
  status             ExamStatus
  pdfPath            String?

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@map("member_test")
}

model MemberAttendance {
  id              Int            @id @default(autoincrement())
  memberId        Int
  date            String
  time            String
  rawDate         DateTime
  attendanceImage String?
  location        String?
  description     String?
  isApproved      Boolean        @default(false)
  type            AttendanceType

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("member_attendance")
}

model MemberCourse {
  id                      Int      @id @default(autoincrement())
  uid                     String?  @unique
  memberId                Int
  persetujuanPembayaran   Boolean?
  persetujuanOrangtuaWali Boolean?
  trainingId              Int

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  member   Member   @relation(name: "MemberToCourses", fields: [memberId], references: [id], onDelete: Cascade)

  @@map("member_course")
}

model MemberIdentity {
  id               Int      @id @default(autoincrement())
  nationalId       String
  studentNumber    String
  placeOfBirth     String
  dateOfBirth      DateTime
  religion         String
  gender           Gender
  province         String
  city             String
  district         String
  village          String
  postalCode       Int
  ktpFile          String?
  detailedAddress  String
  // phoneNumber      String   @unique
  isParentGuardian Boolean  @default(false)
  socialHelp       String //?Example: '|PKH|,|KPS|,|KIP|'
  memberId         Int      @unique

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("member_identity")
}

model MemberParent {
  id           Int              @id @default(autoincrement())
  uid          String           @unique
  name         String
  relation     ParentIdentifier
  workplace    String
  salary       Float
  placeOfBirth String
  dateOfBirth  DateTime
  phoneNumber  String           @unique
  memberId     Int

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("member_parent")
}

model WhatsappService {
  id       Int     @id @default(autoincrement())
  session  String
  isActive Boolean

  @@map("whatsapp_service")
}

model Facilitator {
  id          Int    @id @default(autoincrement())
  name        String
  position    String
  phoneNumber String
  userId      Int    @unique

  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  FacilitatorAttendance FacilitatorAttendance[]
}

model FacilitatorAttendance {
  id              Int                @id @default(autoincrement())
  facilitatorId   Int
  UID             String             @unique //<FacilitatorId><DDMMYYYY><typeSchedule>
  attendanceImage String?
  location        String?
  type            AttendanceType
  typeSchedule    AttendanceSchedule
  createdAt       DateTime           @default(now())

  facilitator Facilitator @relation(fields: [facilitatorId], references: [id], onDelete: Cascade)
}

model TermReference {
  id      Int         @id @default(autoincrement())
  title   String
  type    allowedTerm
  content String      @db.Text
}
