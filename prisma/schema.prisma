datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generator"
}

//?BEGIN ENUM
enum RoleCode {
  SUPERADMIN
  ADMIN
}

enum TrainingType {
  R //Regular
  P //Pemerintah
}

enum ChatType {
  T //Text
  I //Image
  F //File
}

enum WorkStatus {
  Pekerja_Penuh_Waktu
}

enum ExamStatus {
  Pending
  Selesai
}

enum AttendanceType {
  H //Hadir
  I //Izin
  S //Sakit
  A //Alpha
}

enum CourseStatus {
  Sudah
  Sedang
  Selesai
}

enum Gender {
  L //Laki-laki
  P //Perempuan
}

enum ParentIdentifier {
  I //Ibu
  A //Ayah
  W //Wali
}

//? END ENUM

// MODELS
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  forgotToken  String
  forgotExpiry DateTime

  employee      Employee?
  chatsSent     Chat[]    @relation("ChatSender")
  chatsReceived Chat[]    @relation("ChatReceiver")
  member        Member?

  @@map("user")
}

model Role {
  id       Int        @id @default(autoincrement())
  name     String
  code     RoleCode
  Employee Employee[]
}

model Employee {
  id           Int    @id @default(autoincrement())
  name         String
  roleId       Int
  position     String
  profileImage String
  email        String
  phoneNumber  String @unique
  userId       Int    @unique

  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("employee")
}

model Transaction {
  id Int @id @default(autoincrement())

  memberTransactions MemberTransaction[]

  @@map("transaction")
}

model Training {
  id                  Int          @id @default(autoincrement())
  title               String
  description         String
  trainingImage       String
  type                TrainingType
  category            String
  totalParticipants   Int
  totalCourses        Int
  totalHours          Int
  targetTrainingHours Int

  materials     Material[]
  memberCourses MemberCourse[]
  exams         Exam[]

  @@map("training")
}

model Exam {
  id             Int    @id @default(autoincrement())
  trainingId     Int
  title          String
  description    String
  totalQuestions Int
  totalHours     Int
  questions      Json

  training    Training     @relation(fields: [trainingId], references: [id])
  memberTests MemberTest[]

  @@map("ujian")
}

model Material {
  id         Int    @id @default(autoincrement())
  trainingId Int
  coverImage String
  title      String
  size       String
  link       String

  training Training @relation(fields: [trainingId], references: [id])

  @@map("materi")
}

model Chat {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  message    String
  imageLink  String
  fileSize   String
  fileLink   String
  sentAt     DateTime
  type       ChatType

  sender   User @relation("ChatSender", fields: [senderId], references: [id])
  receiver User @relation("ChatReceiver", fields: [receiverId], references: [id])

  @@map("chats")
}

// MEMBER SCHEMA
model Member {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  name                String
  profileImage        String
  totalCourses        Int
  totalCoursePrice    Float
  totalCourseHours    Int
  totalExamsCompleted Int
  totalMaterials      Int
  totalCareers        Int
  formattedAttendance String
  firstAttendanceDate DateTime
  currentCourseId     Int?
  alumniComment       String
  isAlumni            Boolean
  createdAt           DateTime

  user         User                @relation(fields: [userId], references: [id])
  identity     MemberIdentity?
  careers      MemberWork[]
  parents      MemberParent[]
  attendances  MemberAttendance[]
  salarys      MemberSalary[]
  tests        MemberTest[]
  transactions MemberTransaction[]
  courses      MemberCourse[]      @relation(name: "MemberToCourses")

  @@map("siswa")
}

model MemberTransaction {
  id            Int      @id @default(autoincrement())
  memberId      Int
  isSuccess     Boolean
  paymentTotal  Float
  transactionId Int
  paymentDate   DateTime

  transaction Transaction @relation(fields: [transactionId], references: [id])
  member      Member      @relation(fields: [memberId], references: [id])

  @@map("siswa_transaction")
}

model MemberCertificate {
  id               Int    @id @default(autoincrement())
  memberCourseId   Int?
  certificateImage String
  link             String
  title            String
  size             String

  course MemberCourse? @relation(fields: [memberCourseId], references: [id])

  @@map("siswa_certificate")
}

model MemberWork {
  id                  Int        @id @default(autoincrement())
  memberId            Int
  position            String
  status              WorkStatus
  companyName         String
  companyLogo         String
  isCurrentlyEmployed Boolean
  startDate           DateTime?
  endDate             DateTime?
  location            String

  member      Member         @relation(fields: [memberId], references: [id])
  salarySlips MemberSalary[]

  @@map("siswa_work")
}

model MemberSalary {
  id          Int   @id @default(autoincrement())
  workId      Int
  memberId    Int
  monthIndex  Int
  year        Int
  basicSalary Float
  allowance   Float
  bonus       Float
  overtime    Float

  work   MemberWork @relation(fields: [workId], references: [id])
  member Member?    @relation(fields: [memberId], references: [id])

  @@map("siswa_slip_gaji")
}

model MemberTest {
  id                 Int        @id @default(autoincrement())
  startTime          DateTime
  questionsCompleted Int
  hoursCompleted     Int
  memberId           Int
  examId             Int
  attendedAt         DateTime
  finishedAt         DateTime
  status             ExamStatus

  member Member @relation(fields: [memberId], references: [id])
  exam   Exam   @relation(fields: [examId], references: [id])

  @@map("siswa_ujian")
}

model MemberAttendance {
  id              Int            @id @default(autoincrement())
  memberId        Int
  date            DateTime
  time            DateTime
  rawDate         DateTime
  attendanceImage String
  location        String
  description     String
  type            AttendanceType

  member Member @relation(fields: [memberId], references: [id])

  @@map("siswa_attendance")
}

model MemberCourse {
  id         Int          @id @default(autoincrement())
  memberId   Int
  trainingId Int
  status     CourseStatus

  training    Training            @relation(fields: [trainingId], references: [id])
  member      Member              @relation(name: "MemberToCourses", fields: [memberId], references: [id])
  certificate MemberCertificate[] // one-to-many (because in your schema you used array)

  @@map("siswa_course")
}

model MemberIdentity {
  id               Int      @id @default(autoincrement())
  nationalId       String
  studentNumber    String
  placeOfBirth     String
  dateOfBirth      DateTime
  religion         String
  gender           Gender
  province         String
  city             String
  district         String
  village          String
  postalCode       Int
  detailedAddress  String
  phoneNumber      String   @unique
  isParentGuardian Boolean
  socialHelp       String
  memberId         Int      @unique

  member Member @relation(fields: [memberId], references: [id])

  @@map("siswa_identity")
}

model MemberParent {
  id           Int              @id @default(autoincrement())
  name         String
  relation     ParentIdentifier
  occupation   String
  salary       Float
  placeOfBirth String
  dateOfBirth  DateTime
  phoneNumber  Int              @unique
  memberId     Int

  member Member @relation(fields: [memberId], references: [id])

  @@map("siswa_parent")
}
